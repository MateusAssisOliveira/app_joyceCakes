# =========================
# TODO LIST - Projeto Joyce Cakes
# =========================

## ‚úÖ Funcionalidades j√° implementadas

- **Sistema de Rotas (RouteController)**
  - Gerenciamento centralizado das rotas da aplica√ß√£o, permitindo navega√ß√£o entre diferentes p√°ginas e componentes.
- **P√°gina de Estoque**
  - Estrutura modular composta por EstoquePage, EstoquePageView e EstoquePageController, seguindo o padr√£o MVC.
- **Modelagem do Estoque (EstoqueModel)**
  - Representa√ß√£o dos dados de produtos, com m√©todos para CRUD e integra√ß√£o com o banco de dados.
- **Handlers Especializados**
  - EstoqueDataHandler: Gerencia opera√ß√µes de listagem, pagina√ß√£o e cache dos produtos.
  - EstoqueProductHandler: Gerencia sele√ß√£o, adi√ß√£o, edi√ß√£o e exclus√£o de produtos.
- **Cadastro, Edi√ß√£o e Exclus√£o de Produtos**
  - Di√°logos modais para adicionar e editar produtos, com feedback visual e atualiza√ß√£o da tabela.
- **Busca de Produtos**
  - Busca por nome com atualiza√ß√£o din√¢mica da tabela e mensagens de erro amig√°veis.
- **Pagina√ß√£o**
  - Controle de navega√ß√£o entre p√°ginas de produtos, com rodap√© de pagina√ß√£o e atualiza√ß√£o autom√°tica.
- **Feedback Visual**
  - Snackbars para informar sucesso ou erro nas opera√ß√µes.
- **Logger**
  - Registro detalhado de eventos, erros e opera√ß√µes importantes para auditoria e depura√ß√£o.
- **Conex√£o com Banco de Dados MySQL**
  - Classe Database com suporte a context manager, autocommit, execu√ß√£o de scripts SQL e valida√ß√£o de credenciais.
- **Interface Responsiva**
  - Utiliza√ß√£o do Flet para constru√ß√£o de UI moderna, responsiva e com separa√ß√£o clara entre controller, view e model.
- **Controle de Cache**
  - Cache de pagina√ß√£o para otimizar consultas, com m√©todos para limpeza ap√≥s altera√ß√µes.
- **Estrutura Modular**
  - Separa√ß√£o clara de responsabilidades, facilitando manuten√ß√£o e expans√£o futura.

---

## üü° Melhorias, Bugs Conhecidos e Pontos de Aten√ß√£o

### Prioridade Alta

- **[Performance]** Limpeza de cache de pagina√ß√£o
  - Garantir que o cache seja sempre limpo ap√≥s opera√ß√µes de adi√ß√£o, edi√ß√£o ou exclus√£o de produtos para evitar inconsist√™ncias na tabela.
- **[Interface]** Valida√ß√£o de dados
  - Implementar valida√ß√£o robusta nos formul√°rios de cadastro/edi√ß√£o para evitar dados inv√°lidos no banco.
- **[Interface]** Confirma√ß√£o antes de excluir
  - Adicionar di√°logo de confirma√ß√£o antes de excluir produtos para evitar remo√ß√µes acidentais.
- **[Organiza√ß√£o de C√≥digo]** Testes unit√°rios
  - Implementar testes unit√°rios para handlers, controllers e models, garantindo maior confiabilidade do sistema.

### Prioridade M√©dia

- **[Interface]** Ordena√ß√£o e filtros avan√ßados
  - Permitir ordena√ß√£o por colunas e filtros por tipo, faixa de pre√ßo, etc.
- **[Interface]** Melhorias visuais e responsividade
  - Refinar o layout da tabela, adicionar loading/spinner durante opera√ß√µes e melhorar experi√™ncia em dispositivos m√≥veis.
- **[Performance]** Otimiza√ß√£o de consultas SQL
  - Revisar queries para garantir efici√™ncia, especialmente com grandes volumes de dados.
- **[Organiza√ß√£o de C√≥digo]** Refatora√ß√£o de handlers
  - Revisar e simplificar handlers, removendo duplicidades e melhorando a clareza do fluxo de dados.
- **[Interface]** Mensagens de erro mais detalhadas
  - Exibir mensagens de erro mais informativas para o usu√°rio final, diferenciando erros de valida√ß√£o, conex√£o, etc.

### Prioridade Baixa

- **[Internacionaliza√ß√£o]** Suporte a m√∫ltiplos idiomas (i18n)
  - Preparar a aplica√ß√£o para tradu√ß√£o, facilitando uso em outros idiomas.
- **[Documenta√ß√£o]** Documentar endpoints, fluxos e principais decis√µes de arquitetura.
- **[Seguran√ßa]** Logs de auditoria para altera√ß√µes cr√≠ticas.
- **[Organiza√ß√£o de C√≥digo]** Padroniza√ß√£o de nomenclatura e coment√°rios.
- **[Interface]** Exporta√ß√£o de dados (CSV, PDF).
- **[Seguran√ßa]** Suporte a m√∫ltiplos usu√°rios e permiss√µes.

---

## üöÄ Tarefas Futuras Sugeridas

- **Implementar tela de login e autentica√ß√£o de usu√°rios**
  - Controle de acesso e permiss√µes para diferentes funcionalidades.
- **Adicionar testes de integra√ß√£o**
  - Simular fluxos completos do usu√°rio, garantindo que todas as partes do sistema funcionam em conjunto.
- **Melhorar arquitetura para facilitar manuten√ß√£o**
  - Avaliar uso de padr√µes como Repository, Service Layer, ou at√© migra√ß√£o para um framework web mais robusto se o projeto crescer.
- **Automatizar deploy e backups**
  - Scripts para deploy automatizado e rotinas de backup do banco de dados.
- **Monitoramento e alertas**
  - Implementar monitoramento de erros e alertas para falhas cr√≠ticas.
- **Aprimorar experi√™ncia do usu√°rio**
  - Pesquisar com usu√°rios reais para identificar pontos de melhoria na navega√ß√£o e usabilidade.
- **Preparar para escalabilidade**
  - Planejar estrutura para suportar aumento de dados e usu√°rios, caso necess√°rio.

---

## üìù Observa√ß√µes Gerais

- O projeto segue uma boa separa√ß√£o de responsabilidades (MVC), facilitando manuten√ß√£o e testes.
- O uso de cache para pagina√ß√£o √© eficiente, mas requer aten√ß√£o para ser invalidado corretamente ap√≥s altera√ß√µes.
- O padr√£o de manter o produto selecionado no handler √© adequado para a interface atual.
- O uso de autocommit no banco est√° correto para o contexto, mas pode ser revisado se opera√ß√µes transacionais mais complexas forem necess√°rias.
- O c√≥digo est√° bem modularizado, mas pode se beneficiar de mais testes, documenta√ß√£o e padroniza√ß√£o para facilitar a colabora√ß√£o e evolu√ß√£o futura.

---